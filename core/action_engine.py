import asyncio
import importlib
import os
from .condition_evaluator import ConditionEvaluator


def _check_action_success_criteria(plugin, criteria, action_result):
    for criterion in criteria:
        if not plugin.evaluate_success_criteria(criterion, action_result):
            return False
    return True


class ActionEngine:
    def __init__(self, variable_manager):
        self.plugins = {}
        self.variable_manager = variable_manager
        self.condition_evaluator = ConditionEvaluator(variable_manager)

    def load_plugins(self):
        plugin_dir = 'plugins'
        for filename in os.listdir(plugin_dir):
            if filename.endswith('.py') and filename != '__init__.py':
                module_name = filename[:-3]
                module = importlib.import_module(f'plugins.{module_name}')
                for name, cls in module.__dict__.items():
                    if isinstance(cls, type) and name.endswith('Plugin'):
                        self.plugins[name] = cls()

    def execute_workflow(self, workflow, config):
        try:
            for stage in workflow['stages']:
                if 'condition' in stage:
                    if not self.condition_evaluator.evaluate(stage['condition']):
                        continue

                if 'loop' in stage:
                    self._execute_loop(stage['loop'], stage['steps'])
                else:
                    self._execute_steps(stage['steps'])

        except Exception as e:
            print(f"Workflow execution failed: {str(e)}")
            self._handle_failure(workflow.get('on_failure', []))
            return False

        self._handle_completion(workflow.get('on_completion', []))
        return True

    def _execute_steps(self, steps):
        for step in steps:
            try:
                result = self._execute_action(step)
                if 'success_criteria' in step:
                    action_name = step['action']
                    plugin_name = next(k.split('.')[0] for k in step.keys() if k != 'action')
                    plugin = self.plugins[plugin_name]
                    if not _check_action_success_criteria(plugin, step['success_criteria'], result):
                        raise Exception(f"Action '{action_name}' failed to meet success criteria")
            except Exception as e:
                print(f"Step '{step['action']}' failed: {str(e)}")
                if not step.get('continue_on_failure', False):
                    raise  # Re-raise the exception to stop the workflow
                else:
                    print(f"Continuing workflow despite failure in step '{step['action']}'")

    def _execute_loop(self, loop, steps):
        loop_variable = loop['variable']
        loop_values = loop['values']

        for value in loop_values:
            self.variable_manager.set_variable(loop_variable, value)
            self._execute_steps(steps)

    def _execute_action(self, action):
        action_name = action['action']
        for plugin_method, params in action.items():
            if plugin_method != 'action':
                plugin_name, method_name = plugin_method.split('.')
                break
        else:
            raise ValueError(f"No plugin method found for action: {action_name}")

        # RÃ©soudre les variables dans les arguments du plugin
        resolved_args = self._resolve_variables(params)
        plugin_args = {k: v for k, v in resolved_args.items() if k not in ['success_criteria', 'output_variable']}

        print(f"[{plugin_name}] Executing action: {action_name}")

        if plugin_name in self.plugins:
            plugin = self.plugins[plugin_name]
            if hasattr(plugin, method_name):
                try:
                    result = getattr(plugin, method_name)(**plugin_args)
                    if asyncio.iscoroutine(result):
                        result = asyncio.get_event_loop().run_until_complete(result)

                    if 'success_criteria' in action:
                        if not _check_action_success_criteria(plugin, action['success_criteria'], result):
                            raise Exception(f"Action '{action_name}' failed to meet success criteria")

                    if 'output_variable' in action:
                        self.variable_manager.set_variable(action['output_variable'], result)

                    print(f"[{plugin_name}] Action {action_name} completed successfully")
                    return result
                except Exception as e:
                    print(f"[{plugin_name}] Action {action_name} failed: {str(e)}")
                    raise
            else:
                raise ValueError(f"[{plugin_name}] Method {method_name} not found in plugin")
        else:
            raise ValueError(f"Plugin {plugin_name} not found")

    def _handle_failure(self, failure_actions):
        for action in failure_actions:
            self._execute_action(action)

    def _handle_completion(self, completion_actions):
        for action in completion_actions:
            resolved_action = self._resolve_variables(action)
            self._execute_action(resolved_action)

    def _resolve_variables(self, params):
        resolved_params = {}
        for key, value in params.items():
            if isinstance(value, str) and value.startswith('${') and value.endswith('}'):
                var_name = value[2:-1]
                resolved_params[key] = self.variable_manager.get_variable(var_name)
            else:
                resolved_params[key] = value
        return resolved_params
