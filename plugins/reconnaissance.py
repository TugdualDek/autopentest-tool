from plugins.base_plugin import BasePlugin
import http.client
import concurrent.futures
import random
import string


def generate_random_subdomain(length=8):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))


class ReconnaissancePlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.target = None

    def evaluate_success_criteria(self, criterion, action_result):
        if criterion == "at_least_one_subdomain_found":
            return action_result and len(action_result) > 0
        return super().evaluate_success_criteria(criterion, action_result)

    def enumerate_subdomains(self, target, max_attempts):
        self.target = target
        discovered_subdomains = []
        # print(f"Starting subdomain enumeration for {target} with {max_attempts} attempts")

        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            future_to_subdomain = {executor.submit(self.check_random_subdomain): i for i in range(max_attempts)}
            for i, future in enumerate(concurrent.futures.as_completed(future_to_subdomain)):
                try:
                    subdomain = future.result()
                    if subdomain:
                        discovered_subdomains.append(subdomain)
                        print(f"Attempt {i+1}/{max_attempts}: Discovered subdomain: {subdomain}")
                    #else:
                        #print(f"Attempt {i+1}/{max_attempts}: No subdomain found")
                except Exception as exc:
                    print(f"Attempt {i+1}/{max_attempts}: An exception occurred: {exc}")

        print(f"Subdomain enumeration completed. Discovered {len(discovered_subdomains)} subdomains")
        return discovered_subdomains

    def check_random_subdomain(self):
        subdomain = generate_random_subdomain()
        full_domain = f"{subdomain}.{self.target}"
        # print(f"Checking subdomain: {full_domain}")
        conn = http.client.HTTPSConnection(full_domain, timeout=5)
        try:
            conn.request("HEAD", "/")
            response = conn.getresponse()
            if response.status < 400:
                # print(f"Valid subdomain found: {full_domain}")
                return full_domain
            #else:
                # print(f"Invalid subdomain: {full_domain} (Status: {response.status})")
        #except Exception as e:
            #print(f"Error checking {full_domain}: {str(e)}")
        finally:
            conn.close()
        return None
